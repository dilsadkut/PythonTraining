# -*- coding: utf-8 -*-
"""Day3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B239N71PN81XrpI6Qd68jZL5_MQZI8YJ

## Question-1

Write a program that inputs an integer value (stop_number) from the user and prints the sum of all numbers from 0 to stop_number. You can assume the user will enter a valid value.
"""

stop_number = int(input("Please enter a stop number: "))

result = 0
for i in range(0, stop_number):
    result = result + i
    print(result)
print(result)

"""## Question-2

Extend your program to also input the start_number from the user. In this case, your program will add all numbers from start_number to stop_number. You can assume that the user will enter two valid values.
"""

start_number = int(input("Please enter a start number: "))
stop_number = int(input("Please enter a stop number: "))

result = 0
for i in range(start_number, stop_number):
  result += i
  
print(result)

"""## Question-3

Extend your program to check if the start_number is an integer between 0 and 100. If so, your program will continue to ask for the second input and perform calculations; otherwise, it prints an error and stops execution.
"""

start_number = int(input("Please enter a start number: "))

if 0 <= start_number <= 100:
  stop_number = int(input("Please enter a stop number: "))
  
  if start_number <= stop_number <= 100:
  
    result = 0
    for i in range(start_number, stop_number):
      result += i
    print(result)
  else:
    print("Invalid stop number")

  
else:
  print("Invalid start number")

"""### Modules

They are tools that contain some functions and attributes that enable us to perform some functions easily. It provides the opportunity to use these functions it hosts in different files and programs over and over again. Thanks to the modules, Python has become a much more useful and easy-to-implement.

In order to use any module in Python, we first need to 'import' it. Importing means making functions and attributes within one module available from within another program.

**import <module_name>**
"""

import random as rnd

secret = rnd.randint(1,100)

check = False

#guess = int(input("Please enter you guess: "))

for x in range(5):
  guess = int(input("Please enter you guess: "))
  if guess == secret:
    print("Congrats!!")
    check = True
    break
  elif guess < secret:
    print("Please enter a greater number!!")
  else: 
    print("Please enter a smaller number!!")
    
if not check:
  print("Looseer..The number was: ", secret)

"""# Dictionaries



* A data type in Python.
* Dictionaries are indexed by keys and these keys can be a String and integer type.
* Shown as key:value pairs and keys are the unique values.
*   {}




"""

d = {}

print(d)
type(d)

d = {"python":1, "course":2}
print(d)

d2 = {"machine":"learning", "artificial":"intelligence" }
d2

d2["artificial"]

d2["java"] = "programming"
d2

d2["ruby"] = "programming"
d2

d2["ruby"] = "language"
d2

d

d["course"]

d2["deep"] = "learning"
d2
#print(d2)

d

print(d.keys())

d2.keys()

d2.values()

d2.items()

for k in d2.keys():
  print(k)

for v in d.values():
  print(v)

for v in d2.values():
  print(v)

d2

for k,v in d2.items():
  print("Key:", k, "Value:", v)

for k,v in d.items():
  if v == 2:
    print(k)

d

d["a"] = [3,4,5]
d

d.pop("python")
d

d.pop("python")
d

d

len(d)

"a" in d

"aa" in d

d2

d2.get("java")

d2.get("Global AI Hub")

d2

del d2["deep"]
d2

d2

d2['machine'] = "Deep Learning"
d2

d2['machine'] = "Deep Learning"
d2

d2_copy = d2.copy()
d2_copy

d2_copy['deep'] = 'AI'
d2_copy

d2

d4 = {"human":2,
      "cat":4,
      "spider":8
     }

for i in d4:
  leg = d4[i]
  print("%s has %d legs " % (i,leg))
  print(str(i) + " has " + str(leg) +" legs.")

d4 = {"human":2, "cat":4, "spider":8}

for i,leg in d4.items():
  print(str(i) + " has " + str(leg) +" legs.")

districts = {"İstanbul":["Bostancı", "Beşiktaş", "Kadıköy"], 
           "Ankara":["Çankaya", "Gölbaşı", "Kızılcahamam"],
           "İzmir":["Çeşme","Bornova","Foça"]}

districts["İstanbul"]

type(districts)

type(districts["Ankara"])

districts["İzmir"][0][0]

districts["İzmir"][2]

#creating a dictionary from a list


nums = list(range(9)) # [0,1,2,3,4,5,6,7,8]

even_sqr = {x: x**2 for x in nums if x % 2 == 0}
print(even_sqr)

"""# Sets


* A set, unlike lists, is a collection of data in no particular order; items cannot be accessed by indexing.
* Just like mathematical sets, it cannot contain more than one of the same items.

* An item can only be added once in sets. So a set cannot have two identical elements.
* We use the set() function to create an empty set.






"""

s = {"python", 5,6,8,5,6,"abc", "python","python","python","python","python","python","python","python","python"}
s

empty = set()
type(empty)

empty2 = {}
type(empty2)

s2 = set(["python", 5,6,8,5,6,"abc", "python"])
print(s2)

ne = set("pineapple")
print(ne)
ne

#Bu hata neden alındı.
y = {"a","b",{'a':[1,2,3]},5,6}
print(y)

s2

6 in s2

9 in s2

len(s2)

s2.add("ai")
s2

s2.add("ai")
print(s2)
len(s2)

s2.remove("ai")
print(s2)

#karekök bulma
from math import sqrt

#import math 

print({x for x in list(range(10))})

print({sqrt(x) for x in list(range(10))})

"""# Tuples



* It is an ordered data structure, it has an index value like lists, it can contain all data types.
* Unlike lists, they have a structure that cannot be changed. If we have more than one unchangeable values, we can collect them in a bunch.


"""

tupl = (1,2,3,4,5)
print(tupl)
print(type(tupl))

tuple2 = ()  
type(tuple2)

print(tupl[3])

tupl[-2]

tupl[:4]

dm3 = ("asli", 5, 8, "september")
dm3.index("september")

dm3.count(5)

dm4 = ("apple","pear","strawberry")

dm4[0] = "cherry"

print(dm4)

dm4 = ("apple","pear","strawberry")

dm4[3] = "cherry"

print(dm4)

dm4

dm4.remove("pear")

# creating a dictionary in which tuples are keys.

a = {(x, x+1): x for x in range(10)}
print(a)

s5 = (5,6)

print(type(s5))

a[s5]

a[(3,4)]

"""### Question"""

vegetables = ['squash', 'pea', 'carrot', 'potato']
vegetables.sort()

vegetables

vegetables

fruit = ['watermelon','pineapple', 'apple', 'banana', 'apricot']
sorted(fruit)

fruit